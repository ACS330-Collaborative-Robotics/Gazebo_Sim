// Generated by gencpp from file cpr_robot/GetJointInfoResponse.msg
// DO NOT EDIT!


#ifndef CPR_ROBOT_MESSAGE_GETJOINTINFORESPONSE_H
#define CPR_ROBOT_MESSAGE_GETJOINTINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cpr_robot
{
template <class ContainerAllocator>
struct GetJointInfoResponse_
{
  typedef GetJointInfoResponse_<ContainerAllocator> Type;

  GetJointInfoResponse_()
    : JointName()
    , JointType(0)  {
    }
  GetJointInfoResponse_(const ContainerAllocator& _alloc)
    : JointName(_alloc)
    , JointType(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _JointName_type;
  _JointName_type JointName;

   typedef uint32_t _JointType_type;
  _JointType_type JointType;





  typedef boost::shared_ptr< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointInfoResponse_

typedef ::cpr_robot::GetJointInfoResponse_<std::allocator<void> > GetJointInfoResponse;

typedef boost::shared_ptr< ::cpr_robot::GetJointInfoResponse > GetJointInfoResponsePtr;
typedef boost::shared_ptr< ::cpr_robot::GetJointInfoResponse const> GetJointInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator1> & lhs, const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.JointName == rhs.JointName &&
    lhs.JointType == rhs.JointType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator1> & lhs, const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cpr_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e062f5953b81fb4b736cd37870663cd";
  }

  static const char* value(const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e062f5953b81fb4ULL;
  static const uint64_t static_value2 = 0xb736cd37870663cdULL;
};

template<class ContainerAllocator>
struct DataType< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cpr_robot/GetJointInfoResponse";
  }

  static const char* value(const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string JointName\n"
"uint32 JointType\n"
;
  }

  static const char* value(const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.JointName);
      stream.next(m.JointType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cpr_robot::GetJointInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cpr_robot::GetJointInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "JointName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.JointName);
    s << indent << "JointType: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.JointType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CPR_ROBOT_MESSAGE_GETJOINTINFORESPONSE_H
