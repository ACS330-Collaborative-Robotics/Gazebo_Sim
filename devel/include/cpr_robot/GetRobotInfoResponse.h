// Generated by gencpp from file cpr_robot/GetRobotInfoResponse.msg
// DO NOT EDIT!


#ifndef CPR_ROBOT_MESSAGE_GETROBOTINFORESPONSE_H
#define CPR_ROBOT_MESSAGE_GETROBOTINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cpr_robot
{
template <class ContainerAllocator>
struct GetRobotInfoResponse_
{
  typedef GetRobotInfoResponse_<ContainerAllocator> Type;

  GetRobotInfoResponse_()
    : Model()
    , CountJoints(0)
    , InputChannels()
    , OutputChannels()  {
    }
  GetRobotInfoResponse_(const ContainerAllocator& _alloc)
    : Model(_alloc)
    , CountJoints(0)
    , InputChannels(_alloc)
    , OutputChannels(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Model_type;
  _Model_type Model;

   typedef uint32_t _CountJoints_type;
  _CountJoints_type CountJoints;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _InputChannels_type;
  _InputChannels_type InputChannels;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _OutputChannels_type;
  _OutputChannels_type OutputChannels;





  typedef boost::shared_ptr< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRobotInfoResponse_

typedef ::cpr_robot::GetRobotInfoResponse_<std::allocator<void> > GetRobotInfoResponse;

typedef boost::shared_ptr< ::cpr_robot::GetRobotInfoResponse > GetRobotInfoResponsePtr;
typedef boost::shared_ptr< ::cpr_robot::GetRobotInfoResponse const> GetRobotInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator1> & lhs, const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Model == rhs.Model &&
    lhs.CountJoints == rhs.CountJoints &&
    lhs.InputChannels == rhs.InputChannels &&
    lhs.OutputChannels == rhs.OutputChannels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator1> & lhs, const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cpr_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06ada5bff31d9ffb1d84dbd4ca91405e";
  }

  static const char* value(const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06ada5bff31d9ffbULL;
  static const uint64_t static_value2 = 0x1d84dbd4ca91405eULL;
};

template<class ContainerAllocator>
struct DataType< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cpr_robot/GetRobotInfoResponse";
  }

  static const char* value(const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Model\n"
"uint32 CountJoints\n"
"string[] InputChannels\n"
"string[] OutputChannels\n"
;
  }

  static const char* value(const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Model);
      stream.next(m.CountJoints);
      stream.next(m.InputChannels);
      stream.next(m.OutputChannels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRobotInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cpr_robot::GetRobotInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "Model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Model);
    s << indent << "CountJoints: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.CountJoints);
    s << indent << "InputChannels[]" << std::endl;
    for (size_t i = 0; i < v.InputChannels.size(); ++i)
    {
      s << indent << "  InputChannels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.InputChannels[i]);
    }
    s << indent << "OutputChannels[]" << std::endl;
    for (size_t i = 0; i < v.OutputChannels.size(); ++i)
    {
      s << indent << "  OutputChannels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.OutputChannels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CPR_ROBOT_MESSAGE_GETROBOTINFORESPONSE_H
